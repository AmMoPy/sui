import{DB_NAME,DB_VERSION}from"./constants.min.js";import{state}from"./state.min.js";let db;async function verifyStorage(){if(navigator.storage&&navigator.storage.persist){const isPersisted=await navigator.storage.persist();if(!isPersisted){console.warn("Storage not persistent - data may be cleared")}}}const getDB=async()=>{if(db)return db;return new Promise(((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onblocked=()=>console.warn("DB blocked by other tabs");request.onerror=event=>{console.error("DB error:",event.target.error);reject(event.target.error)};request.onsuccess=event=>{console.log("DB initialized");db=event.target.result;resolve(db)};request.onupgradeneeded=event=>{const database=event.target.result;if(!database.objectStoreNames.contains("items")){const store=database.createObjectStore("items",{keyPath:"id",autoIncrement:true});store.createIndex("type","type",{unique:false});store.createIndex("name","name",{unique:false});store.createIndex("timestamp","timestamp",{unique:false});store.createIndex("finalSize","finalSize",{unique:false})}}}))};async function debugDB(){const db=await getDB();const tx=db.transaction("items","readonly");const dbItems=await new Promise((resolve=>{const req=tx.objectStore("items").getAll();req.onsuccess=()=>resolve(req.result)}));console.log("DB Contents:",dbItems);console.log("Current Playlist:",state.items)}export{verifyStorage,getDB,debugDB};